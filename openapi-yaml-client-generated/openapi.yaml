openapi: 3.0.0
info:
  title: Library
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/natcha0012/softarch/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: owner
  description: Secured Owner-only calls
- name: customers
  description: Operations available to everyone
paths:
  /api/books/allbook:
    get:
      tags:
      - customers
      summary: searches all books
      description: |
        By passing in the appropriate options, you can search for
        available books in the Library
      operationId: searchAllBooks
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
        "400":
          description: bad input parameter
  /api/books/:id:
    get:
      tags:
      - customers
      summary: searches a book by id
      description: |
        By passing in the appropriate options, you can search for
        available books in the Library
      operationId: getBookId
      parameters:
      - name: id
        in: query
        description: pass an search id for looking up books
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "400":
          description: bad input parameter
  /api/addbook:
    post:
      tags:
      - owner
      summary: insert a new book
      description: Adds a new book to the Library
      operationId: addBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        "201":
          description: item created
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
  /api/deletebook:
    delete:
      tags:
      - owner
      summary: remove a book by id
      description: delete a book by id
      operationId: deleteBook
      parameters:
      - name: id
        in: query
        description: pass an search id for looking up books
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "201":
          description: item deleted
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
components:
  schemas:
    Books:
      type: array
      items:
        $ref: '#/components/schemas/Book'
    Book:
      required:
      - author
      - id
      - title
      type: object
      properties:
        id:
          type: integer
          example: 123
        title:
          type: string
          example: A Tale of Two Cities
        author:
          type: string
          example: Charles Dickens
